278. First Bad Version 

Related Topics: Binary Search, Interactive

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.


Example 2:

Input: n = 1, bad = 1
Output: 1

First Attempt:

Code:

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        if n == 1:
            return 1
        left = 1
        right = n
        while left<=right:
            mid=(left+right)//2
            if isBadVersion(mid)==False and isBadVersion(mid+1)==False:
                left = mid + 1
            if isBadVersion(mid)==True and isBadVersion(mid-1)==True:
                right = mid - 1
            if isBadVersion(mid)==False and isBadVersion(mid+1)==True:
                return mid+1
            if isBadVersion(mid)==True and isBadVersion(mid-1)==False:
                return mid

Feedback: I passed this problem in my first attemp slightly using the binary search algorithm I guess. But I think Code can be improved since it seems like a bit of hard-coding.

Second Attempt:

Code:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left = 1
        right = n
        result = 1
        
        while left<=right:
            mid = (left+right)//2
            if isBadVersion(mid) == False:
                left = mid+1
            else:
                right = mid-1
                result = mid
                
        return result

Feedback: Yes my first code could be improved by just simply considering the case of isBadVersion(mid) == False only. Got hint from leetcode solution.
